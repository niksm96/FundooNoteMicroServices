package com.bridgelabz.fundoonotes.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.model.Label;
import com.bridgelabz.fundoonotes.model.Note;
import com.bridgelabz.fundoonotes.repository.LabelRepository;
import com.bridgelabz.fundoonotes.repository.NoteRepository;
import com.bridgelabz.fundoonotes.utility.ListUtils;
import com.bridgelabz.fundoonotes.utility.TokenGenerator;

@Service
public class NoteServiceImpl implements NoteService {

	@Autowired
	private NoteRepository noteRepository;

	@Autowired
	private LabelRepository labelRepository;

	@Autowired
	private TokenGenerator tokenGenerator;

	@Override
	public boolean create(Note note, String token) {
		note.setUserId(tokenGenerator.verifyToken(token));
		return noteRepository.save(note) != null;
	}

	@Override
	public List<Note> retrieve(String token) {
		return noteRepository.findAllByUserId(tokenGenerator.verifyToken(token));
	}

	@Override
	public Note updateNote(int noteId, Note note, String token) {
		int userId = tokenGenerator.verifyToken(token);
		 Optional<Note> maybeNote = noteRepository.findNoteIdByUserId(userId, noteId);
		 return maybeNote.orElseGet(() -> null);
		

//		Optional<Note> maybeNote = notes.stream()
//				.filter(exitingNote -> exitingNote.getNoteId() == noteId)
//				.findAny();
//
//		return maybeNote
//				.map(existingNote -> updateCurrentNote(note, existingNote))
//				.orElseGet(() -> null);
	}

	private Note updateCurrentNote(Note note, Note existingNote) {
		existingNote.setTitle(note.getTitle());
		existingNote.setDescription(note.getDescription());
		existingNote.setArchive(note.isArchive());
		existingNote.setPinned(note.isPinned());
		existingNote.setTrashed(note.isTrashed());
		return noteRepository.save(existingNote);
	}

	@Override
	public boolean deleteNote(int noteId, String token) {
		int userId = tokenGenerator.verifyToken(token);
		List<Note> notes = noteRepository.findAllByUserId(userId);
		if (!notes.isEmpty()) {
			Note existingNote = notes.stream().filter(exitingNote -> exitingNote.getNoteId() == noteId).findAny().get();
			noteRepository.delete(existingNote);
			return true;
		}
		return false;
	}

	@Override
	public boolean createLabel(Label label, String token) {
		int userId = tokenGenerator.verifyToken(token);
		label.setUserId(userId);
		Label createdLabel = labelRepository.save(label);
		return (createdLabel != null) ? true : false;
	}

	@Override
	public List<Label> retrieveLabel(String token) {
		List<Label> labels = null;
		int userId = tokenGenerator.verifyToken(token);
		labels = labelRepository.findAllByUserId(userId);
		return labels;
	}

	@Override
	public Label updateLabel(int labelId, Label label, String token) {
		Label newLabel = null;
		int userId = tokenGenerator.verifyToken(token);
		List<Label> labels = labelRepository.findAllByUserId(userId);
		if (!labels.isEmpty()) {
			newLabel = labels.stream().filter(exitingLabel -> exitingLabel.getLabelId() == labelId).findAny().get();
			newLabel.setLabelName(label.getLabelName());
			labelRepository.save(newLabel);
		}
		return newLabel;
	}

	@Override
	public boolean deleteLabel(int labelId, String token) {
		int userId = tokenGenerator.verifyToken(token);
		List<Label> labels = labelRepository.findAllByUserId(userId);
		if (!labels.isEmpty()) {
			Label existingLabel = labels.stream().filter(exitingLabel -> exitingLabel.getLabelId() == labelId).findAny()
					.get();
			labelRepository.delete(existingLabel);
			return true;
		}
		return false;
	}

	@Override
	public boolean addLabelToNote(int noteId, int labelId) {
		Note note = noteRepository.findByNoteId(noteId);
		Label label = labelRepository.findByLabelId(labelId);
		List<Label> labels = note.getListOfLabels();
		labels.add(label);
		if (!labels.isEmpty()) {
			note.setListOfLabels(labels);
			noteRepository.save(note);
			return true;
		}
		return false;
	}

	@Override
	public boolean removeLabelFromNote(int noteId, int labelId) {
		Note note = noteRepository.findByNoteId(noteId);
		List<Label> labels = note.getListOfLabels();
		if (!labels.isEmpty()) {
			labels = labels.stream().filter(label -> label.getLabelId() != labelId).collect(Collectors.toList());
			note.setListOfLabels(labels);
			noteRepository.save(note);
			return true;
		}
		return false;
	}

}
