package com.bridgelabz.fundoonotes.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.Validator;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.fundoonotes.model.User;
import com.bridgelabz.fundoonotes.service.UserService;

@RestController("/user")
public class UserController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private Validator userValidator;

	@InitBinder
	private void initBinder(WebDataBinder binder) {
		binder.setValidator(userValidator);
	}

	@PostMapping("/registeruser")
	public ResponseEntity<?> register(@Validated @RequestBody User user, HttpServletRequest request) {
		boolean isRegistered = userService.register(user, request);
		if (isRegistered)
			return new ResponseEntity<String>("Registered Successfully", HttpStatus.OK);
		else
			return new ResponseEntity<String>("Registeration failed", HttpStatus.CONFLICT);
	}
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody User user,HttpServletRequest request, HttpServletResponse response) {
		User existingUser = userService.login(user,request, response);
		if (existingUser != null)
			return new ResponseEntity<String>("Logged in Successfully", HttpStatus.OK);
		else
			return new ResponseEntity<String>("Login failed", HttpStatus.CONFLICT);
	}
	
	@PostMapping("/updateuser")
	public ResponseEntity<?> updateUser(@RequestHeader String token, @RequestBody User user,
			HttpServletRequest request) {
		User updatedUser = userService.update(token, user, request);
		if (updatedUser != null) {
			return new ResponseEntity<String>("Updated Successfully", HttpStatus.OK);
		}
		return new ResponseEntity<String>("Couldn't update", HttpStatus.CONFLICT);
	}
	
	@DeleteMapping(value = "/deleteuser")
	public ResponseEntity<?> deleteUser(@RequestHeader String token, HttpServletRequest request) {
		boolean result = userService.delete(token, request);
		if (result) {
			return new ResponseEntity<String>("Deleted successfully", HttpStatus.OK);
		}
		return new ResponseEntity<String>("Couldn't delete", HttpStatus.CONFLICT);
	}
	
	@GetMapping("/activationstatus/{token:.+}")
	public ResponseEntity<?> activateUser(@PathVariable("token") String token, HttpServletRequest request) {
		User updatedUser = userService.activationStatus(token, request);
		if (updatedUser != null) {
			return new ResponseEntity<String>("Activated Successfully", HttpStatus.OK);
		}
		return new ResponseEntity<String>("Couldn't activate", HttpStatus.CONFLICT);
	}
	
	@GetMapping("/forgotpassword")
	public ResponseEntity<?> forgotPassword(@RequestParam("emailId") String emailId, HttpServletRequest request) {
		if (userService.forgotPassword(emailId, request)) {
			return new ResponseEntity<String>("Forgot password operation successful", HttpStatus.OK);
		}
		return new ResponseEntity<String>("Forgot password operation not successful", HttpStatus.CONFLICT);
	}

	@PutMapping(value = "/resetpassword/{token:.+}")
	public ResponseEntity<?> resetPassword(@PathVariable("token") String token, @RequestBody User user,
			HttpServletRequest request) {
		User updatedUser = userService.resetPassword(user, token, request);
		if (updatedUser != null) {
			return new ResponseEntity<String>("Your password has been reset", HttpStatus.OK);
		}
		return new ResponseEntity<String>("Your password couldn't be reset", HttpStatus.CONFLICT);
	}

}
