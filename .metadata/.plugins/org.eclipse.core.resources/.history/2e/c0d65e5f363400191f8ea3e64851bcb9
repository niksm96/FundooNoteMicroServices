package com.bridgelabz.fundoonotes.service;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.model.Label;
import com.bridgelabz.fundoonotes.model.Note;
import com.bridgelabz.fundoonotes.repository.LabelRepository;
import com.bridgelabz.fundoonotes.repository.NoteRepository;
import com.bridgelabz.fundoonotes.utility.TokenGenerator;

@Service
public class NoteServiceImpl implements NoteService {

	@Autowired
	private NoteRepository noteRepository;
	
	@Autowired
	private LabelRepository labelRepository;

	@Autowired
	private TokenGenerator tokenGenerator;

	@Override
	public boolean create(Note note, String token, HttpServletRequest request) {
		int userId = tokenGenerator.verifyToken(token);
		note.setUserId(userId);
		Note registeredNote = noteRepository.save(note);
		return (registeredNote != null) ? true : false;
	}

	@Override
	public List<Note> retrieve(String token, HttpServletRequest request) {
		List<Note> notes = null;
		int userId = tokenGenerator.verifyToken(token);
		notes = noteRepository.findAllByUserId(userId);
		System.out.println(notes);
		return notes;
	}

	@Override
	public Note updateNote(int noteId, Note note, String token, HttpServletRequest request) {
		Note newNote = null;
		int userId = tokenGenerator.verifyToken(token);
		List<Note> notes = noteRepository.findAllByUserId(userId);
		if (!notes.isEmpty()) {
			newNote = notes.stream().filter(exitingNote -> exitingNote.getNoteId() == noteId).findAny().get();
			newNote.setTitle(note.getTitle());
			newNote.setDescription(note.getDescription());
			newNote.setArchive(note.isArchive());
			newNote.setPinned(note.isPinned());
			newNote.setTrashed(note.isTrashed());
			noteRepository.save(newNote);
		}
		return newNote;
	}

	@Override
	public boolean deleteNote(int noteId, String token, HttpServletRequest request) {
		int userId = tokenGenerator.verifyToken(token);
		List<Note> notes = noteRepository.findAllByUserId(userId);
		if (!notes.isEmpty()) {
			Note existingNote = notes.stream().filter(exitingNote -> exitingNote.getNoteId() == noteId).findAny().get();
			noteRepository.delete(existingNote);
			return true;
		}
		return false;
	}

	@Override
	public boolean createLabel(Label label, String token, HttpServletRequest request) {
		int userId = tokenGenerator.verifyToken(token);
		label.setUserId(userId);
		Label createdLabel = labelRepository.save(label);
		return (registeredNote != null) ? true : false;
	}

	@Override
	public List<Label> retrieveLabel(String token, HttpServletRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Label updateLabel(int labelId, Label label, String token, HttpServletRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean deleteLabel(int labelId, String token, HttpServletRequest request) {
		// TODO Auto-generated method stub
		return false;
	}

}
