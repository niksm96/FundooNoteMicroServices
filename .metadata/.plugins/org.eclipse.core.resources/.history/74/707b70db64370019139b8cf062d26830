package com.bridgelabz.fundoonotes.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.model.Label;
import com.bridgelabz.fundoonotes.model.Note;
import com.bridgelabz.fundoonotes.repository.LabelRepository;
import com.bridgelabz.fundoonotes.repository.NoteRepository;
import com.bridgelabz.fundoonotes.utility.TokenGenerator;

@Service
public class NoteServiceImpl implements NoteService {

	@Autowired
	private NoteRepository noteRepository;

	@Autowired
	private LabelRepository labelRepository;

	@Autowired
	private TokenGenerator tokenGenerator;

	@Override
	public boolean create(Note note, String token) {
		note.setUserId(tokenGenerator.verifyToken(token));
		return noteRepository.save(note) != null;
	}

	@Override
	public List<Note> retrieve(String token) {
		return noteRepository.findAllByUserId(tokenGenerator.verifyToken(token));
	}

	@Override
	public Note updateNote(int noteId, Note note, String token) {
		int userId = tokenGenerator.verifyToken(token);
		Optional<Note> maybeNote = noteRepository.findByUserIdAndNoteId(userId, noteId);
		return maybeNote
				.map(existingNote -> noteRepository
						.save(existingNote.setTitle(note.getTitle()).setDescription(note.getDescription())
								.setArchive(note.isArchive()).setPinned(note.isPinned()).setTrashed(note.isTrashed())))
				.orElseGet(() -> null);
	}

	@Override
	@Transactional
	public boolean deleteNote(int noteId, String token) {
		int userId = tokenGenerator.verifyToken(token);
		Optional<Note> maybeNote = noteRepository.findByUserIdAndNoteId(userId, noteId);
		return maybeNote.map(note -> {
			noteRepository.delete(note);
			return true;
		}).orElseGet(() -> false);
	}

	@Override
	public boolean createLabel(Label label, String token) {
		label.setUserId(tokenGenerator.verifyToken(token));
		return labelRepository.save(label) != null;
	}

	@Override
	public List<Label> retrieveLabel(String token) {
		return labelRepository.findAllByUserId(tokenGenerator.verifyToken(token));
	}

	@Override
	public Label updateLabel(int labelId, Label label, String token) {
		int userId = tokenGenerator.verifyToken(token);
		Optional<Label> maybeLabel = labelRepository.findByUserIdAndLabelId(userId, labelId);
		return maybeLabel.map(existingLabel -> labelRepository.save(existingLabel.setLabelName(label.getLabelName()))).orElseGet(()->null);
	}

	@Override
	public boolean deleteLabel(int labelId, String token) {
		int userId = tokenGenerator.verifyToken(token);
		Optional<Label> maybeLabel = labelRepository.findByUserIdAndLabelId(userId, labelId);
		maybeLabel.map(existingLabel->{
			labelRepository.delete(existingLabel);
			return true;
		}).orElseGet(()->false);
	}

	@Override
	public boolean addLabelToNote(int noteId, int labelId) {
		Note note = noteRepository.findByNoteId(noteId);
		Label label = labelRepository.findByLabelId(labelId);
		List<Label> labels = note.getListOfLabels();
		labels.add(label);
		if (!labels.isEmpty()) {
			note.setListOfLabels(labels);
			noteRepository.save(note);
			return true;
		}
		return false;
	}

	@Override
	public boolean removeLabelFromNote(int noteId, int labelId) {
		Note note = noteRepository.findByNoteId(noteId);
		List<Label> labels = note.getListOfLabels();
		if (!labels.isEmpty()) {
			labels = labels.stream().filter(label -> label.getLabelId() != labelId).collect(Collectors.toList());
			note.setListOfLabels(labels);
			noteRepository.save(note);
			return true;
		}
		return false;
	}

}
